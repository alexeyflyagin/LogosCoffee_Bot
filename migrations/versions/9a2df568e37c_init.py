"""Init

Revision ID: 9a2df568e37c
Revises: 
Create Date: 2025-01-12 09:33:05.018939

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy import insert, text

from src import config
from src.data.logoscoffee.db.models import AdminAccountOrm, EmployeeAccountOrm

# revision identifiers, used by Alembic.
revision: str = '9a2df568e37c'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        'admin_account',
        sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
        sa.Column('token', sa.VARCHAR(length=16), nullable=False),
        sa.Column('date_last_announcement_distributing', sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('token')
    )
    op.create_table(
        'announcement',
        sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
        sa.Column('date_create', sa.DateTime(), nullable=False),
        sa.Column('date_last_distribute', sa.DateTime(), nullable=True),
        sa.Column('text_content', sa.TEXT(), nullable=True),
        sa.Column('preview_photo_data', sa.VARCHAR(), nullable=True),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_table(
        'client_account',
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('token', sa.VARCHAR(length=16), nullable=False),
        sa.Column('client_name', sa.VARCHAR(), nullable=True),
        sa.Column('phone_number', sa.VARCHAR(), nullable=False),
        sa.Column('date_create', sa.DateTime(), nullable=False),
        sa.Column('loyalty_points', sa.INTEGER(), nullable=False),
        sa.Column('date_last_review', sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('phone_number'),
        sa.UniqueConstraint('token')
    )
    op.create_table(
        'employee_account',
        sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
        sa.Column('token', sa.VARCHAR(length=16), nullable=False),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('token')
    )
    op.create_table(
        'event_subscriber',
        sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
        sa.Column('event_name', sa.VARCHAR(), nullable=False),
        sa.Column('date_create', sa.DateTime(), nullable=False),
        sa.Column('chat_id', sa.BIGINT(), nullable=False),
        sa.Column('data', sa.JSON(), nullable=True),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_table(
        'review',
        sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
        sa.Column('date_create', sa.DateTime(), nullable=False),
        sa.Column('text_content', sa.TEXT(), nullable=False),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_table(
        'user_state',
        sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
        sa.Column('bot_id', sa.BIGINT(), nullable=False),
        sa.Column('user_id', sa.BIGINT(), nullable=False),
        sa.Column('chat_id', sa.BIGINT(), nullable=False),
        sa.Column('state', sa.VARCHAR(), nullable=True),
        sa.Column('data', sa.JSON(), nullable=False),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_table(
        'order',
        sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
        sa.Column('date_create', sa.DateTime(), nullable=False),
        sa.Column('client_id', sa.BIGINT(), nullable=False),
        sa.Column('pickup_code', sa.VARCHAR(length=4), nullable=True),
        sa.Column('date_pending', sa.DateTime(), nullable=True),
        sa.Column('date_cooking', sa.DateTime(), nullable=True),
        sa.Column('date_ready', sa.DateTime(), nullable=True),
        sa.Column('date_completed', sa.DateTime(), nullable=True),
        sa.Column('date_canceled', sa.DateTime(), nullable=True),
        sa.Column('cancel_details', sa.TEXT(), nullable=True),
        sa.Column('details', sa.TEXT(), nullable=True),
        sa.ForeignKeyConstraint(['client_id'], ['client_account.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id')
    )

    op.execute(insert(AdminAccountOrm).values(token=config.DEFAULT_ADMIN_TOKEN_FOR_LOGIN))
    op.execute(insert(EmployeeAccountOrm).values(token=config.DEFAULT_EMPLOYEE_TOKEN_FOR_LOGIN))

    op.execute(text("""
        CREATE OR REPLACE FUNCTION notify_new_review()
        RETURNS TRIGGER AS $$
        BEGIN
            PERFORM pg_notify('new_review', row_to_json(NEW)::text);
            RETURN NEW;
        END;
        $$ LANGUAGE plpgsql;
    """))
    op.execute(text("""
        CREATE TRIGGER trigger_new_review
        AFTER INSERT ON review
        FOR EACH ROW
        EXECUTE FUNCTION notify_new_review();
    """))

    op.execute(text("""
        CREATE OR REPLACE FUNCTION notify_new_distributed_announcement()
        RETURNS TRIGGER AS $$
        BEGIN
            PERFORM pg_notify('new_distributed_announcement', row_to_json(NEW)::text);
            RETURN NEW;
        END;
        $$ LANGUAGE plpgsql;
    """))
    op.execute(text("""
        CREATE TRIGGER trigger_update_announcement
        AFTER UPDATE ON announcement
        FOR EACH ROW
        EXECUTE FUNCTION notify_new_distributed_announcement();
    """))

    op.execute(text("""
            CREATE OR REPLACE FUNCTION notify_new_order()
            RETURNS TRIGGER AS $$
            BEGIN
                PERFORM pg_notify('new_order', row_to_json(NEW)::text);
                RETURN NEW;
            END;
            $$ LANGUAGE plpgsql;
        """))
    op.execute(text("""
            CREATE TRIGGER trigger_new_order
            AFTER INSERT ON "order"
            FOR EACH ROW
            EXECUTE FUNCTION notify_new_order();
        """))
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('order')
    op.drop_table('user_state')
    op.drop_table('review')
    op.drop_table('event_subscriber')
    op.drop_table('employee_account')
    op.drop_table('client_account')
    op.drop_table('announcement')
    op.drop_table('admin_account')

    op.execute(text("""DROP TRIGGER trigger_new_order ON order"""))
    op.execute(text("""DROP FUNCTION notify_new_order()"""))

    op.execute(text("""DROP TRIGGER trigger_update_announcement ON announcement"""))
    op.execute(text("""DROP FUNCTION notify_new_distributed_announcement()"""))

    op.execute(text("""DROP TRIGGER trigger_new_review ON review"""))
    op.execute(text("""DROP FUNCTION notify_new_review()"""))
    # ### end Alembic commands ###
